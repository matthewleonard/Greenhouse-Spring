/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.leonardgarden.greenhouse.equipmentservice.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.leonardgarden.greenhouse.equipmentservice.model.Equipment;
import com.leonardgarden.greenhouse.equipmentservice.model.EquipmentHistory;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-04-15T16:33:30.590-05:00")

@Api(value = "equipment", description = "the equipment API")
public interface EquipmentApi {

    Logger log = LoggerFactory.getLogger(EquipmentApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Deletes an equipment object", nickname = "equipmentEquipmentIdDelete", notes = "", tags={ "equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Equipment object deleted successfully"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/equipment/{equipmentId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> equipmentEquipmentIdDelete(@ApiParam(value = "Id of the equipment object to delete", required = true) @PathVariable("equipmentId") Long equipmentId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EquipmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns information about a specified equipment object", nickname = "equipmentEquipmentIdGet", notes = "", response = Equipment.class, tags={ "equipment", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "An equipment object", response = Equipment.class),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/equipment/{equipmentId}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<Equipment> equipmentEquipmentIdGet(@ApiParam(value = "Id of the equipment object to get information from", required = true) @PathVariable("equipmentId") Long equipmentId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 22,  \"name\" : \"Greenhouse Heater\",  \"description\" : \"Temperature sensor for basement greenhouse\",  \"controller_id\" : 12,  \"pin_location\" : 7}", Equipment.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EquipmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns the equipment object history data for a given time period", nickname = "equipmentEquipmentIdHistoryGet", notes = "", response = EquipmentHistory.class, tags={ "equipment", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Collection of history data in the given date range", response = EquipmentHistory.class),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/equipment/{equipmentId}/history/",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<EquipmentHistory> equipmentEquipmentIdHistoryGet(@ApiParam(value = "Id of the equipment object to get history from", required = true) @PathVariable("equipmentId") Long equipmentId, @ApiParam(value = "The start datetime for the history range") @Valid @RequestParam(value = "startDate", required = false) String startDate, @ApiParam(value = "the end datetime for the history range") @Valid @RequestParam(value = "endDate", required = false) String endDate) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", EquipmentHistory.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EquipmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "posts an action to equipment", nickname = "equipmentEquipmentIdPost", notes = "", tags={ "equipment", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Action successful"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/equipment/{equipmentId}",
        method = RequestMethod.POST)
    default ResponseEntity<Void> equipmentEquipmentIdPost(@ApiParam(value = "Id of the equipment object to get information from", required = true) @PathVariable("equipmentId") Long equipmentId, @NotNull @ApiParam(value = "Id of the equipment object to get information from", required = true) @Valid @RequestParam(value = "action", required = true) String action, @NotNull @ApiParam(value = "parameters to pass to action", required = true) @Valid @RequestParam(value = "value", required = true) String value) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EquipmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Updates the equipment object", nickname = "equipmentEquipmentIdPut", notes = "", tags={ "equipment", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Equipment updated successfully"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/equipment/{equipmentId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> equipmentEquipmentIdPut(@ApiParam(value = "Id of the equipment object to update", required = true) @PathVariable("equipmentId") Long equipmentId, @ApiParam(value = "JSON data representing an equipment object", required = true) @Valid @RequestBody Equipment equipmentData) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EquipmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Gets equipment", nickname = "equipmentGet", notes = "", tags={ "equipment", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "List of equipment objects"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/equipment",
        method = RequestMethod.GET)
    default ResponseEntity<Void> equipmentGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EquipmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Creates a new equipment object", nickname = "equipmentPost", notes = "", tags={ "equipment", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Equipment object Created"),
        @ApiResponse(code = 500, message = "Server Error") })
    @RequestMapping(value = "/equipment",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> equipmentPost(@ApiParam(value = "JSON data representing an equipment object", required = true) @Valid @RequestBody Equipment equipmentData) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EquipmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
